/*
 hash(s[i...j]) = (hash(s[0...j]) - hash(s[0...(i-1)]))/p^i (mod m) can be calculated in O(1) by storing prefix of hash values
 hash(s) = Î£s[i]*p^i (mod m) (from i = 0 to i=n) where s[i] = 1 for 'a' and so on

long long compute_hash(string const& s) {
    const int p = 31; // p is chosen such that p is prime and is just greater than number of alphabets allowed
    const int m = 1e9 + 9;
    long long hash_value = 0;
    long long p_pow = 1;
    for (char c : s) {
        hash_value = (hash_value + (c - 'a' + 1) * p_pow) % m;
        p_pow = (p_pow * p) % m;
    }
    return hash_value;
}

// hash(s) creates a hash value of s mod m
