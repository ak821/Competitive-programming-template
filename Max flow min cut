// Ford-fulkerson algorithm Complexity - O(v*e^2)

vector<vector<int>> adj,capacity;

void bfs(int s,int v,vector<int> &path){
    queue<int> q;
    fill(all(p),-1);
    p[s] = -2;
    q.push({s,1e9});
    while(!q.empty()){
        int cur = q.front().F;
        int flow = q.front().S; q.pop();
        for(auto next : adj[cur]){
            if(p[next]==-1 && capacity[cur][next]){
                p[next] = cur;
                int new_flow = min(flow,capacity[cur][next]);
                if(next == t ) return new_flow;
                q.push({next,new_flow});
            }
        }
    }
    return 0;
}

int max_flow(int s,int t){
    vector<int> parent(n);
    int flow=0,new_flow;
    
    while(new_flow = bfs(s,t,parent)){
        flow += new_flow;
        int cur = t;
        while(cur!=s){
            int prev = parent[cur];
            capacity[prev][cur] -= new_flow;
            capacity[cur][prev] += new_flow;
            cur = prev;
        }
    }
    return flow; 
}
