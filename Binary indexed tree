// VERSION 1 (Find a[i] after range updates )
int bit[maxn] = {0};

void add(int idx, int val) { // 0 based index
    for (++idx; idx < n; idx += idx & -idx)
        bit[idx] += val;
}

void range_add(int l, int r, int val) {
    add(l, val);
    add(r + 1, -val);
}

int point_query(int idx) { // returns A[idx]
    int ret = 0;
    for (++idx; idx > 0; idx -= idx & -idx)
        ret += bit[idx];
    return ret;
}
int sum(int l,r){
    return point_query(r) - point_query(l-1);
} 

// END

//VERSION 2 RANGE QUERY SUPPORTED ( 2 BIT ARE USED )
int b1[maxn],b2[maxn]; //both are initialized with zeroes

void add(int *b,int idx,int x){
    while(idx <= N)
        b[idx] += x;
        idx += idx & (-idx);
    }
}

void range_add(int l,int r,int x){
    add(B1, l, x);
    add(B1, r+1, -x);
    add(B2, l, x*(l-1));
    add(B2, r+1, -x*r);
}

int sum(int *b,int idx){
    int total = 0;
    while(idx > 0){
        total += b[idx];
        idx -= idx & -idx;
    }
    return total;
}
int prefix_sum(int idx){
    return sum(B1, idx)*idx -  sum(B2, idx);
}

int range_sum(int l,int r){
    return prefix_sum(r) - prefix_sum(l-1);
}

// END

// binary_indexed_tree 
template<typename T> struct binary_indexed_tree {
    int S;
    vector<T> table;
    
    binary_indexed_tree<T>(int SZ = 0) : S(SZ) { //CONSTRUCTOR
        table.resize(S+1);
    }
 
    // Adds v to the element at index i (0 based indexed)
    void add(int i, T v) {
        for (i++; i <= S; i += i&-i)
            table[i] = table[i] + v;
    }
 
    // Replaces the element at index i with v
    void replace(int i, T v) {
        add(i, v - sum(i, i+1));
    }
 
    // Returns the sum of the elements at indices in [0, i)
    T sum(int i) const {
        T res{};
        for (; i; i -= i&-i)
            res = res + table[i];
        return res;
    }
 
    // Returns the sum of the elements at indices in [l, r)
    T sum(int l, int r) const {
        return l > r ? T{} : sum(r) - sum(l);
    }
    // We can also write new functions here as required and take our own data type
};
 
binary_indexed_tree<int> bit(maxn); //Declaration int declares type it can also be vector<int> or pair<int,int>, etc.
// bit.add(index,5);  bit.sum(l,r); bit.replace(index,20); bit.sum(i); Calling

 
